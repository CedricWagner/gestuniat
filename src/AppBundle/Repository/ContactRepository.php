<?php

namespace AppBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use AppBundle\Entity\StatutJuridique;

/**
 * ContactRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactRepository extends \Doctrine\ORM\EntityRepository
{

	public function findAllWithPagination($page=1,$nb=20){
		

		$qb = $this->createQueryBuilder('contact');
		$qb
			->select('contact')
			->where('contact.isActif = true')
            ->setFirstResult(($nb*$page)-$nb)
            ->setMaxResults($nb*$page);

        $pag = new Paginator($qb);
        return $pag;
	}
	
	public function findByFilter($filterValues,$page=1,$nb=20,$orderby="numAdh",$order="ASC"){
		
		$params = array();
		
		$datetime = new \DateTime();

		$qb = $this->createQueryBuilder('contact');
		$qb
			->select('contact')
			->where('contact.isActif = true');
		$isj=0;
		$anciennete=array();
		foreach ($filterValues as $fv) {
			if($fv->getValeur()!=''&&$fv->getValeur()!='0'){
				switch ($fv->getChamp()->getLabel()) {
					case 'txtLocalisation':
							$qb->andwhere('contact.commune LIKE :p_commune');
							$params['p_commune'] = $fv->getValeur();
						break;
					case 'dateCreation':
						switch ($fv->getValeur()) {
							case 'TODAY':
								$qb->andwhere('contact.dateEntree = :p_date_entree');
								$params['p_date_entree'] = new \DateTime();
								break;
							case 'THIS_WEEK':
								$qb->andwhere('contact.dateEntree >= :p_date_entree');
								$params['p_date_entree'] = new \DateTime('-1 week');
								break;
							case 'THIS_MONTH':
								$qb->andwhere('contact.dateEntree >= :p_date_entree');
								$params['p_date_entree'] = new \DateTime('-1 month');
								break;
							case 'LAST_6_MONTHS':
								$qb->andwhere('contact.dateEntree >= :p_date_entree');
								$params['p_date_entree'] = new \DateTime('-6 months');
								break;
							case 'LAST_YEAR':
								$qb->andwhere('contact.dateEntree >= :p_date_entree');
								$params['p_date_entree'] = new \DateTime('-1 year');
								break;
							case 'MORE_THAN_A_YEAR':
								$qb->andwhere('contact.dateEntree < :p_date_entree');
								$params['p_date_entree'] = new \DateTime('-1 year');
								break;
							default:
								# code...
								break;
						}
						break;
					case 'dateAncienneteMonth':
						$anciennete['month'] = $fv->getValeur();
						break;
					case 'dateAncienneteYear':
						$anciennete['year'] = $fv->getValeur();
						break;
					case 'cbStatut':
						if($isj==0){
							$qb->andwhere('contact.statutJuridique = :p_statut_juridique'.$isj);
						}else{
							$qb->orwhere('contact.statutJuridique = :p_statut_juridique'.$isj);
						}
						$params['p_statut_juridique'.$isj] = $fv->getValeur();
						$isj++;
						break;
					case 'selSection':
						$qb->andwhere('contact.section = :p_section');
						$params['p_section'] = $fv->getValeur();
						break;
					case 'selFonctionSection':
						$qb->andwhere('contact.fonctionSection = :p_fonction_section');
						$params['p_fonction_section'] = $fv->getValeur();
						break;
					case 'selFonctionGroupement':
						if($fv->getValeur()=='TOUTES'){
							$qb->andwhere('contact.fonctionGroupement IS NOT NULL');
						}else{
							$params['p_fonction_groupement'] = $fv->getValeur();
						}
						break;
					case 'txtRepresentation':
						$qb->andwhere('contact.fonctionRepresentation LIKE :p_fonction_representation');
						$params['p_fonction_representation'] = $fv->getValeur();
						break;
					case 'cbCA':
						if($fv->getValeur()==1)
						$qb->andwhere('contact.isCA = true');
						break;
					case 'cbBulletin':
						if($fv->getValeur()==1)
						$qb->andwhere('contact.isBI = true');
						break;
					case 'selPaiement':
						if($fv->getValeur() == 'V_PAYEE'){
							$qb->join('AppBundle:Vignette', 'vign', 'WITH', 'vign.contact = contact');
							$qb->andwhere('vign.datePaiement IS NOT NULL');
						}elseif($fv->getValeur() == 'V_RETARD'){
							$qb->join('AppBundle:Vignette', 'vign', 'WITH', 'vign.contact = contact');
							$qb->andwhere('vign.datePaiement IS NULL');
						}elseif($fv->getValeur() == 'DON'){
							$qb->join('AppBundle:Don', 'don', 'WITH', 'don.contact = contact');
						}elseif($fv->getValeur() == 'COTISATION'){
							$qb->join('AppBundle:Cotisation', 'cotis', 'WITH', 'cotis.contact = contact');
							$qb->andwhere('cotis.datePaiement >= :p_date_debut_annee');
							$qb->andwhere('cotis.datePaiement <= :p_date_fin_annee');
							$params['p_date_debut_annee'] = new \DateTime($datetime->format('Y').'-01-01');
							$params['p_date_fin_annee'] = new \DateTime($datetime->format('Y').'-12-31');
						}elseif($fv->getValeur() == 'COTISATION_RETARD'){
							$qb->andwhere('contact NOT IN (
								SELECT c2 
								FROM AppBundle\Entity\Cotisation cotis 
								JOIN AppBundle\Entity\Contact c2 WITH cotis.contact = c2 
								WHERE cotis.contact = contact 
								AND cotis.datePaiement >= :p_date_debut_annee 
								AND cotis.datePaiement <= :p_date_fin_annee)');
							$params['p_date_debut_annee'] = new \DateTime($datetime->format('Y').'-01-01');
							$params['p_date_fin_annee'] = new \DateTime($datetime->format('Y').'-12-31');
						}
						break;
					case 'selDiplome':
						if ($fv->getValeur()=='NONE') {
							$qb->andwhere('contact NOT IN (
									SELECT c2 
									FROM AppBundle\Entity\ContactDiplome cd 
									JOIN AppBundle\Entity\Contact c2 WITH cd.contact = c2
								)
							');
						}else{
							$qb->join('AppBundle:ContactDiplome', 'cd', 'WITH', 'cd.contact = contact');
							$qb->andwhere('cd.diplome = :p_diplome');
							$params['p_diplome'] = $fv->getValeur();
						}
						break;
					case 'selPrevoyance':
						if ($fv->getValeur()=='OBS') {
							$qb->join('AppBundle:ContratPrevObs', 'cpo', 'WITH', 'cpo.contact = contact');
						}elseif($fv->getValeur()=='AGRR'){
							$qb->join('AppBundle:ContratPrevoyance', 'cp', 'WITH', 'cp.contact = contact');
						}
						break;
					case 'cbRentier':
						if ($fv->getValeur()=='RENTIER') {
							$qb->andwhere('contact.isRentier = :p_is_rentier');
							$params['p_is_rentier'] = true;
						}elseif ($fv->getValeur()=='DESTINATAIRE_INDIV') {
							$qb->andwhere('contact.isEnvoiIndiv LIKE :p_is_envoi_indiv');
							$params['p_is_envoi_indiv'] = true;
						}elseif ($fv->getValeur()=='OFFRE_DECOUVERTE') {
							$qb->andwhere('contact.isOffreDecouverte LIKE :p_is_offre_decouverte');
							$params['p_is_offre_decouverte'] = true;
						}
						break;
				}
			}
		}

		if(isset($anciennete['month'])||isset($anciennete['year'])){
			if(isset($anciennete['month'])){
				$month = $anciennete['month'];
			}else{
				$month = "01";
			}
			
			if(isset($anciennete['year'])){
				$year = $anciennete['year'];
			}else{
				$year = "1900";
			}

			$qb->andwhere('contact.dateAdhesion <= :p_date_adhesion');
			$params['p_date_adhesion'] = sprintf("%04d-%02d-%02d", $year, $month, "01");
		}

		$qb ->setParameters($params)
            ->orderby('contact.'.$orderby,$order)
            ->setFirstResult(($nb*$page)-$nb)
            ->setMaxResults($nb);

        $pag = new Paginator($qb);
        
        return $pag;
	}

	public function search($txtSearch, $exclude=false){

		$strs = explode(' ', $txtSearch);

		$params = array('nom'=>$txtSearch.'%','prenom'=>$txtSearch.'%','numAdh'=>$txtSearch);

		$qb = $this->createQueryBuilder('contact');
		$qb
			->select('contact')
			->where('contact.isActif = true')
			->andwhere("contact.nom LIKE :nom OR contact.prenom LIKE :prenom OR contact.numAdh = :numAdh")
			->addOrderBy('contact.prenom','ASC')
			->addOrderBy('contact.nom','ASC')
            ->setFirstResult(0)
            ->setMaxResults(20);
			if(sizeof($strs)>1){
				$qb ->orwhere("contact.nom LIKE :str1 AND contact.prenom LIKE :str2")
					->orwhere("contact.prenom LIKE :str1 AND contact.nom LIKE :str2");
				$params['str1'] = $strs[0].'%';
				$params['str2'] = $strs[1].'%';
			}
			$qb->setParameters($params);
			

        $pag = new Paginator($qb);

        return $pag;
	}

	public function findMaxNumAdh(){
		$qb = $this->createQueryBuilder('contact');
		$result = $qb
			->select('MAX(contact.numAdh)')
			->getQuery()
    		->execute();

        return $result[0][1];
	}

	public function findFonctionsSection($section){
		$qb = $this->createQueryBuilder('contact');
		$result = $qb
			->select('contact')
			->join('AppBundle:FonctionSection','fs','WITH','contact.fonctionSection = fs')
			->where('contact.section = :p_section')
			->andwhere('contact.isActif = true')
			->setParameters(array('p_section'=>$section))
			->getQuery()
    		->execute();

        return $result;
	}

	public function findDeces($annee,$numTrimestre=1){
		
		if(!$numTrimestre){
			$numTrimestre = 1;
		}

		switch ($numTrimestre) {
			case 1:
				$params = array(
					'p_debut'=> new \DateTime($annee.'-01-01'),
					'p_fin'=> new \DateTime($annee.'-03-31'),
					);
				break;
			case 2:
				$params = array(
					'p_debut'=> new \DateTime($annee.'-04-01'),
					'p_fin'=> new \DateTime($annee.'-06-30'),
					);
				break;
			case 3:
				$params = array(
					'p_debut'=> new \DateTime($annee.'-07-01'),
					'p_fin'=> new \DateTime($annee.'-09-30'),
					);
				break;
			case 4:
				$params = array(
					'p_debut'=> new \DateTime($annee.'-10-01'),
					'p_fin'=> new \DateTime($annee.'-12-31'),
					);
				break;
			default:
				case 1:
				break;
		}

		$qb = $this->createQueryBuilder('contact');
		$result = $qb
			->select('contact')
			->where('contact.dateSaisieDeces >= :p_debut')
			->andwhere('contact.dateSaisieDeces <= :p_fin')
			->setParameters($params)
			->getQuery()
    		->execute();

        return $result;
	}


	public function countContactsBySection($section){
		return $this->createQueryBuilder('contact')
		 ->select('COUNT(contact)')
		 ->where('contact.section = :section')
		 ->andwhere('contact.statutJuridique = :statut')
		 ->andwhere('contact.isActif = true')
		 ->setParameters(array('section'=>$section,'statut'=>StatutJuridique::getIdStatutAdherent()))
		 ->getQuery()
		 ->getSingleScalarResult();

	}
}
